<!DOCTYPE html>
<html lang="en-us">
<meta charset="UTF-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="author" content="Adrienne Cheung">
<meta name="description" content="Calculator for Equity and Utility">
<head>
<link rel="stylesheet" type="text/css" href="stylesheet.css">
<script language="JavaScript" src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js"></script> 
</head>
<body style="background-color: rgb(0,0,70);">
<br>
<center>
<button class = "link" onclick="document.location = 'https://statisticalatlas.com/place/New-York/New-York/Household-Income'">Source of Sample Income Data for New York City</button>
<button class = "link" onclick="document.location = 'https://www.bls.gov/cex/2018/aggregate/quintile.pdf'">Source of Sample Expenditure Data</button>
<button class = "link" onclick="document.location = 'Introduction.htm'">View Documentation</button>
</center>
<br>
<div class="title">
<h1><center>Calculator for Equity: Utility Pricing for the Residential Sector</center></h1>
</div>
<br>
<br>
<h2><center>Calculated Results</center></h2>
<br>
<br>
<br>
<table class="center" id="mytable">
  <tr>
    <th>Income</th>
    <th>Low Consumption</th> 
    <th>Medium Consumption</th> 
    <th>High Consumption</th> 
  </tr>
  <tr>
    <td>First Quintile (Lowest) </td>
    <td>Category One</td>
    <td>Category Two</td>
    <td>Category Three</td>
  </tr>
  <tr>
  <td>Second Quintile</td>
  <td>Category Four</td>
  <td>Category Five</td>
  <td>Category Six</td>
  </tr>
  <tr>
  <td>Third Quintile</td>
  <td>Category Seven</td>
  <td>Category Eight</td>
  <td>Category Nine</td>
  </tr>
  <tr>
  <td>Fourth Quintile</td>
  <td>Category Ten</td>
  <td>Category Eleven</td>
  <td>Category Twelve</td>
  </tr>
  <tr>
  <td>Fifth Quintile (Highest)</td>
  <td>Category Thirteen</td>
  <td>Category Fourteen</td>
  <td>Category Fifteen</td>
  </tr>
</table>
<br>
<br>
<br>
<div id = "main">
<center><canvas id="myChart" width="1000" height="700"></canvas></center>
<center><canvas id="revChart" width="10" height="600"></canvas></center>
<p id = "verdict" style = "font-size: 1.4em"></p>
<br>
<br>
<p id = "output"></p>
<br>
<br>
<br>
<br>
<center><button class = "switch_page" id="myb">Keep Default Values, Evaluate New Inputs</button></center>
<center><button class = "switch_page" id="replaceb">Set Entered Values as Default, Evaluate New Inputs</button></center>
<div id="main" style="width: 80%; margin: 10px auto; max-width: 1200px; overflow-x:scroll">
  <!-- form for user of website tool to enter values to be used in calculations -->
  <form action="next.htm" id = "form1" style="display:none" method="GET">
    <label for="notavailable" style="font-size:1.2em">*All questions refer only to figures relating to residential consumers.  Leave blank any queries for which data is unavailable, or provide an estimate.</label>
    <br>
    <label for="money_sign" style="font-size:1.2em">*Additionally, please make sure that all units of the same type (units of money or units of energy) are the same units (for instance, do not enter some gas-related values in dT, and other gas-related values in therms.)</label>
    <br>
    <br>
    <label for="money_sign" style="font-size:1.2em">*If you do not enter any values, sample data for New York City will be utilized.</label> 
    <br>
    <br>
    <br>
    <br>
    <label for="elec_households" style = "width: 900px; display: inline-block; font-size: 1.2em"><center>Please provide the number of households consuming electricity.</center></label>
    <input type="number" id="elec_households" placeholder=3184496 name="elec_households">
    <br>
    <label for="fix_electric_charge" style = "width: 900px; display: inline-block;  font-size: 1.2em"><center>Please provide the sum of the average monthly fixed charge for electricity.</center></label>
    <input type="number" step = "0.01" id="fix_elec_charge" placeholder=0.62 name="fix_elec_charge">
    <br>
    <label for="var_elec_charge" style = "width: 900px; display: inline-block; font-size: 1.2em"><center>Please provide the sum of the average variable charge per unit for electricity.</center></label>
    <input type="number" step = "0.01" id="var_elec_charge" placeholder= 0.20 name="var_elec_charge">
    <br>
    <label for="gas_households" style = "width: 900px; display: inline-block; font-size: 1.2em"><center>Please provide the number of households consuming gas.</center></label>
    <input type="number" id="gas_households" placeholder=837631 name="gas_households">
    <br>
    <label for="fix_gas_charge" style = "width: 900px; display: inline-block; font-size: 1.2em"><center>Please provide the sum of the average monthly fixed charge for gas.</center></label>
    <input type="number" step = "0.01" id="fix_gas_charge" placeholder=22.22 name="fix_gas_charge">
    <br>
    <label for="var_gas_charge" style = "width: 900px; display: inline-block; font-size: 1.2em"><center>Please provide the sum of the average variable charge per unit for gas.</center></label>
    <input type="number" step = "0.01" id="var_gas_charge" placeholder=0.96 name="var_gas_charge">
    <br>
    <label for="avg_elec_consumption" style = "width: 900px; display: inline-block; font-size: 1.2em"><center>Please provide the average annual electricity consumption.</center></label>
    <input type="number" step = "0.01" id="avg_elec_consumption" placeholder=4090 name="avg_elec_consumption">
    <br>
    <label for="avg_gas_consumption" style = "width: 900px; display: inline-block; font-size: 1.2em"><center>Please provide the average annual gas consumption.</center></label>
    <input type="number" step = "0.01" id="avg_gas_consumption" placeholder=1000 name="avg_gas_consumption">
    <br>
    <label for="maximum_revenue" style = "width: 900px; display: inline-block;  font-size: 1.2em"><center>Please provide the maximum allowed annual revenue for gas and electricity sales.</center></label>
    <input type="number" step = "0.01" id="maximum_revenue" placeholder=4000000000 name="maximum_revenue">
    <br>
    <label for="total_expense" style = "width: 900px; display: inline-block;  font-size: 1.2em"><center>Please provide the estimated total expense associated with providing electricity/gas to the households in question.</center></label>
    <input type="number" step = "0.01" id="total_expense" placeholder=2809850666.67 name="total_expense">
    <br>
    <label for="elec_usage_ratio" style = "width: 900px; display: inline-block;  font-size: 1.2em"><center>Please provide a number for defining the difference between low, medium, and high electric usage. *If, for instance, the number 2 is provided, the usage will double from lower household category to higher household category (see table for household category definitions).</center></label>
    <input type="number" step = "0.001" id="elec_usage_ratio" placeholder=1.163 name="elec_usage_ratio">
    <br>
    <label for="gas_usage_ratio" style = "width: 900px; display: inline-block;  font-size: 1.2em"><center>Please provide a number for defining the difference between low, medium, and high gas usage. *If, for instance, the number 2 is provided, the usage will double from lower household category to higher household category (see table for household category definitions).</center></label>
    <input type="number" step = "0.001" id="gas_usage_ratio" placeholder=1.2 name="gas_usage_ratio">
    <br>
    <br>
    <br>
    <label for="q_one" style = "width: 900px; display: inline-block; font-size: 1.2em"><center>Please input the average annual income for the first income quintile of residential consumers. </center></label>
    <input type="number" id="quintile_one" placeholder=9500 name="quintile_one">
    <br>
    <label for="q_two" style = "width: 900px; display: inline-block; font-size: 1.2em"><center>Please input the average annual income for the second income quintile of residential consumers.</center></label>
    <input type="number" id="quintile_two" placeholder=29200 name="quintile_two">
    <br>
    <label for="q_three" style = "width: 900px; display: inline-block; font-size: 1.2em"><center>Please input the average annual income for the third income quintile of residential consumers.</center></label>
    <input type="number" id="quintile_three" placeholder=55700 name="quintile_three">
    <br>
    <label for="q_four" style = "width: 900px; display: inline-block; font-size: 1.2em"><center>Please input the average annual income for the fourth income quintile of residential consumers.</center></label>
    <input type="number" id="quintile_four" placeholder=94700 name="quintile_four">
    <br>
    <label for="q_five" style = "width: 900px; display: inline-block; font-size: 1.2em"><center>Please input the average annual income for the fifth income quintile of residential consumers.</center></label>
    <input type="number" id="quintile_five" placeholder=253100 name="quintile_five">
    <br>
    <label for="multiplier_for_fix_charge" style = "width: 900px; display: inline-block; font-size: 1.2em"><center>Please input the number by which you want to multiply the current fixed charges in order to decrease them.</center></label>
    <input type="number" step = "0.001" id="multiplier_for_fix_charge" placeholder=0 name="multiplier_for_fix_charge">
    <br>
    <label for="multiplier_for_var_charge" style = "width: 900px; display: inline-block; font-size: 1.2em"><center>Please input the number by which you want to multiply the current variable charges in order to increase them.</center></label>
    <input type="number" step = "0.001" id="multiplier_for_var_charge" placeholder=0 name="multiplier_for_var_charge">
    <br>
    <label for="add_monthly_elec_charge_for_high_usage" style = "width: 900px; display: inline-block; font-size: 1.2em"><center>Please input the average monthly utility benefits for residential consumers who receive said benefits.</center></label>
    <input type="number" step = "0.0001" id="add_monthly_elec_charge_for_high_usage" placeholder=0 name="add_monthly_elec_charge_for_high_usage">
    <br>
    <label for="add_monthly_gas_charge_for_high_usage" style = "width: 900px; display: inline-block; font-size: 1.2em"><center>Please input the average monthly utility benefits for residential consumers who receive said benefits.</center></label>
    <input type="number" step = "0.0001" id="add_monthly_gas_charge_for_high_usage" placeholder= 0 name="add_monthly_gas_charge_for_high_usage">
    <br>
    <label for="benefits" style = "width: 900px; display: inline-block; font-size: 1.2em"><center>Please input the average monthly utility benefits for residential consumers who receive said benefits.</center></label>
    <input type="number" step = "0.01" id="benefits" name="benefits">
    <br>
    <br>
    <br>
    <br>
    <center><button class="switch_page" onclick = "newInputs(burdenchart, "New Inputs", )">Press Enter Key or This Button to View Results</button></center> 
  </form>
</div>
<meta charset="utf-8" />
<title>Calculated Results</title>
<script language="JavaScript">

// XXXXXXXX 1. lower fixed charge 2. increase block rate xxxxxxxx output how far away you are from 0.06. prompt user to change constraints, give feedback.XXXXXXXXX inform users of severity of problem. xxxxxxxx save scenarios xxxxxxxxxx maybe clue user in as to where most of the issues are and which values to prioritize changing xxxxxx
//UPDATEEEEEEEEEEEEE var temp = value, then value = variable entered?


// gets keys (for which values were requested in the form) from text in window search bar

function getKys() {
    var s = window.location.search.replace(/[0-9]/g, ",").replace(/\W/ig, ',').replace(/,+/g,',');
    var s = s.replace("one", "1").replace("two", "2").replace("three", "3").replace("four", "4").replace("five", "5");
    var kys = s.substr(1,s.length-2).split(',');
    return kys;
}

// gets values (the numerical inputs) from text in window search bar


function getValues(kys) {
    var mykeys = kys;
    var s = window.location.search.replace(/[^\d.-]/g, ',').replace(/,+/g,',');
    var vals = s.substr(1, s.length-1).split(','); 
    return vals;
}

// combines the keys and values into one dictionary where each key corresponds to a value
function makeDictionary(mykeys, vals) {
    var mykys = mykeys;
    var myvals = vals;
    var ob = {};
    // list of default values that will be used if a corresponding value was not typed into the form
    // edit: below values come in this order: number of households using electricity, fixed charge for electricity, variable charge for electricity, fixed charge for gas, variable charge for gas, average annual usage of electricity for all households, average annual usage of gas for all households, average annual income for first income quintile, average annual income for second income quintile, average annual income for third income quintile, average annual income for fourth income quintile, average annual income for fifth income quintile, averag equantitiy of federal utility benefits
    var sample = [3184496, 20.24, 0.20, 837631, 25, 1.239329, 4090, 1000, 4000000000, 2809850666.67, 1.163, 1.2, 9500, 29200, 55700, 94700, 253100, 0, 0, 0, 0, 46.50];

    for (var i = 0; i < mykys.length; i++) {
        ob[mykys[i]] = (myvals[i]) ? [parseFloat(myvals[i])] : [parseFloat(sample[i])];
    }
    var output = '';
    for (var property in ob) {
        output += property + ': ' + ob[property]+'; ';
    }
    var myresult = hhcategories(ob);
    return myresult;
}

// uses values from dictionary to construct household categories

// 0
function hhcategories(myob) {
    var ob = myob;
    var i = 1;
    var quint = 1;
    var hhtypes = { };
    while (i<=15) {
      hhtypes[i] = { };
      i+=1;
    }
    var i = 1;
    while (quint<=5) {
      var qnum = `quintile_${ quint }`;
      hhtypes[i]["income"] = parseFloat(myob[qnum]);
      hhtypes[i+1]["income"] = parseFloat(myob[qnum]);
      hhtypes[i+2]["income"] = parseFloat(myob[qnum]);
      i+=3;
      quint++;
    }
    var result0 = proportion(ob, hhtypes);
    return result0;
}

// values in list "prop" are based off values from Pearson-Tukey approximation method

// 1
function proportion(ob, hhs) {
    var hhtypes = hhs;
    var myob = ob;
    var prop = [0.037, 0.126, 0.037];
    var i = 1;
    var ratio = 0;
    while (i <= 13) {
      hhtypes[i]["distribution"] = parseFloat(prop[ratio]);
      hhtypes[i+1]["distribution"] = parseFloat(prop[ratio+1]);
      hhtypes[i+2]["distribution"] = parseFloat(prop[ratio+2]);
      i+=3;
    }
    var result1 = elec_usage_vals(myob, hhtypes);
    return result1;
}

// 2
function elec_usage_vals(ob, hhs) {
    var myob = ob;
    var hhtypes = hhs;
    var avg_elec_consumption = parseFloat(myob["avg_elec_consumption"]);
    var i = 1;
    var elec_usage_ratio = parseFloat(myob["elec_usage_ratio"]);
    var pow = 3;
    while (i<=13) {
      hhtypes[i]["elec_usage_category"] = parseFloat(avg_elec_consumption/(elec_usage_ratio**(pow)));
      hhtypes[i+1]["elec_usage_category"] = parseFloat(avg_elec_consumption/(elec_usage_ratio**(pow-1)));
      hhtypes[i+2]["elec_usage_category"] = parseFloat(avg_elec_consumption/(elec_usage_ratio**(pow-2)));
      i +=3;
      pow -=1;
    }   
    var result2 = ann_elec_consumption(myob, hhtypes);
    return result2;
}

// 3
function ann_elec_consumption(ob, hhs) {
    var myob = ob;
    var hhtypes = hhs;
    var elec_households = myob["elec_households"];
    var i = 1;
    while (i<=13) {
      hhtypes[i]["ann_elec_per_type"] = elec_households * hhtypes[i]["distribution"] * hhtypes[i]["elec_usage_category"];
      hhtypes[i+1]["ann_elec_per_type"] = elec_households * hhtypes[i+1]["distribution"] * hhtypes[i+1]["elec_usage_category"];
      hhtypes[i+2]["ann_elec_per_type"] = elec_households * hhtypes[i+2]["distribution"] * hhtypes[i+2]["elec_usage_category"];
      i++;
    } 
    var result3 = ann_elec_payment_per_hhtype(myob, hhtypes);
    return result3;
}


// 4
function ann_elec_payment_per_hhtype(ob, hhs) {
    var myob = ob;
    var hhtypes = hhs;
    var elec_households = myob["elec_households"];
    var var_elec_charge = myob["var_elec_charge"];
    var fix_elec_charge = myob["fix_elec_charge"];
    var i = 1;
    while (i<=13) {
      hhtypes[i]["elec_payment_by_type"] = hhtypes[i]["ann_elec_per_type"] * var_elec_charge + elec_households * hhtypes[i]["distribution"] * 12 * fix_elec_charge;
      hhtypes[i+1]["elec_payment_by_type"] = hhtypes[i+1]["ann_elec_per_type"] * var_elec_charge + elec_households * hhtypes[i+1]["distribution"] * 12 * fix_elec_charge;
      hhtypes[i+2]["elec_payment_by_type"] = hhtypes[i+2]["ann_elec_per_type"] * var_elec_charge + elec_households * hhtypes[i+2]["distribution"] * 12 * fix_elec_charge;
      i++;
    } 
    var result4 = ann_elec_payment_per_hh_per_hhtype_before_benefits(myob, hhtypes);
    return result4;
}

// 5
function ann_elec_payment_per_hh_per_hhtype_before_benefits(ob, hhs) {
    var myob = ob;
    var hhtypes = hhs;
    var elec_households = myob["elec_households"];
    var i = 1;
    while (i<=13) {
      hhtypes[i]["elec_payment_by_hh_per_type_no_ben"] = hhtypes[i]["elec_payment_by_type"]/(elec_households*hhtypes[i]["distribution"]);
      hhtypes[i+1]["elec_payment_by_hh_per_type_no_ben"] = hhtypes[i+1]["elec_payment_by_type"]/(elec_households*hhtypes[i+1]["distribution"]); 
      hhtypes[i+2]["elec_payment_by_hh_per_type_no_ben"] = hhtypes[i+2]["elec_payment_by_type"]/(elec_households*hhtypes[i+2]["distribution"]);
      i++;
    } 
    var result5 = elec_burden_before_benefits(myob, hhtypes);
    return result5;
}



// 6
function elec_burden_before_benefits(ob, hhs) {
    var myob = ob;
    var hhtypes = hhs;
    var i = 1;
    while (i<=13) {
      hhtypes[i]["elec_burden_before_benefits"] = (hhtypes[i]["elec_payment_by_hh_per_type_no_ben"]/hhtypes[i]["income"]);
      hhtypes[i+1]["elec_burden_before_benefits"] = (hhtypes[i+1]["elec_payment_by_hh_per_type_no_ben"]/hhtypes[i+1]["income"]);
      hhtypes[i+2]["elec_burden_before_benefits"] = (hhtypes[i+2]["elec_payment_by_hh_per_type_no_ben"]/hhtypes[i+2]["income"]);
      i++;
    } 
    var result6 = gas_usage_vals(myob, hhtypes);   
    return result6;
}



// 7
function gas_usage_vals(ob, hhs) {
    var myob = ob;
    var hhtypes = hhs;
    var i = 1;
    var pow = 3;
    while (i<=13) {
      hhtypes[i]["gas_usage_category"] = (parseFloat(myob["avg_gas_consumption"]/(myob["gas_usage_ratio"]**(pow))));
      hhtypes[i+1]["gas_usage_category"] = (parseFloat(myob["avg_gas_consumption"]/(myob["gas_usage_ratio"]**(pow-1))));
      hhtypes[i+2]["gas_usage_category"] = (parseFloat(myob["avg_gas_consumption"]/(myob["gas_usage_ratio"]**(pow-2))));
      i+=3;
      pow-=1;
    }   
    var result7 = ann_gas_consumption(myob, hhtypes);
    return result7;
}



// 8
function ann_gas_consumption(ob, hhs) {
    var myob = ob;
    var hhtypes = hhs;
    var i = 1;
    while (i<=13) {
      hhtypes[i]["ann_gas_per_type"] = (myob["gas_households"] * hhtypes[i]["distribution"] * hhtypes[i]["gas_usage_category"]);
      hhtypes[i+1]["ann_gas_per_type"] = (myob["gas_households"] * hhtypes[i+1]["distribution"] * hhtypes[i+1]["gas_usage_category"]); 
      hhtypes[i+2]["ann_gas_per_type"] = (myob["gas_households"] * hhtypes[i+2]["distribution"] * hhtypes[i+2]["gas_usage_category"]);
      i++;
    } 
    var result8 = ann_gas_payment_per_hhtype(myob, hhtypes);
    return result8;
}



// 9
function ann_gas_payment_per_hhtype(ob, hhs) {
    var myob = ob;
    var hhtypes = hhs;
    var gas_households = myob["gas_households"];
    var var_gas_charge = myob["var_gas_charge"];
    var fix_gas_charge = myob["fix_gas_charge"];
    var i = 1;
    while (i<=13) {
      hhtypes[i]["gas_payment_by_type"] = (hhtypes[i]["ann_gas_per_type"] * var_gas_charge + gas_households * hhtypes[i]["distribution"] * 12 * fix_gas_charge);
      hhtypes[i+1]["gas_payment_by_type"] = (hhtypes[i+1]["ann_gas_per_type"] * var_gas_charge + gas_households * hhtypes[i+1]["distribution"] * 12 * fix_gas_charge);
      hhtypes[i+2]["gas_payment_by_type"] = (hhtypes[i+2]["ann_gas_per_type"] * var_gas_charge + gas_households * hhtypes[i+2]["distribution"] * 12 * fix_gas_charge);
      i++;
    } 
    var result9 = ann_gas_payment_per_hh_per_hhtype_before_benefits(myob, hhtypes);
    return result9;
}

// 10
function ann_gas_payment_per_hh_per_hhtype_before_benefits(ob, hhs) {
    var myob = ob;
    var hhtypes = hhs;
    var gas_households = myob["gas_households"];
    var i = 1;
    while (i<=13) {
      hhtypes[i]["gas_payment_by_hh_per_type_no_ben"] = hhtypes[i]["gas_payment_by_type"]/(gas_households*hhtypes[i]["distribution"]);
      hhtypes[i+1]["gas_payment_by_hh_per_type_no_ben"] = hhtypes[i+1]["gas_payment_by_type"]/(gas_households*hhtypes[i+1]["distribution"]);
      hhtypes[i+2]["gas_payment_by_hh_per_type_no_ben"] = hhtypes[i+2]["gas_payment_by_type"]/(gas_households*hhtypes[i+2]["distribution"]);
      i++;
    }    
    var result10 = gas_burden_before_benefits(myob, hhtypes);
    return result10;
}

// 11
function gas_burden_before_benefits(ob, hhs) {
    var myob = ob;
    var hhtypes = hhs;
    var i = 1;
    while (i<=13) {
      hhtypes[i]["gas_burden_before_benefits"] = (hhtypes[i]["gas_payment_by_hh_per_type_no_ben"]/hhtypes[i]["income"]);
      hhtypes[i+1]["gas_burden_before_benefits"] = (hhtypes[i+1]["gas_payment_by_hh_per_type_no_ben"]/hhtypes[i+1]["income"]); 
      hhtypes[i+2]["gas_burden_before_benefits"] = (hhtypes[i+2]["gas_payment_by_hh_per_type_no_ben"]/hhtypes[i+2]["income"]);
      i++;
    } 
    var result11 = ann_combined_payment_per_hh_per_hhtype_after_benefits(myob, hhtypes);  
    return result11; 
}   

// 12
function ann_combined_payment_per_hh_per_hhtype_after_benefits(ob, hhs) {
    var myob = ob;
    var hhtypes = hhs;
    var benefits = myob["benefits"];
    var i = 1;
    while (i<=6) {
      hhtypes[i]["ann_combined_payment_per_hh_per_hhtype_w_ben"] = (hhtypes[i]["elec_payment_by_hh_per_type_no_ben"] + hhtypes[i]["gas_payment_by_hh_per_type_no_ben"] - benefits);
      hhtypes[i+1]["ann_combined_payment_per_hh_per_hhtype_w_ben"] = (hhtypes[i+1]["elec_payment_by_hh_per_type_no_ben"] + hhtypes[i+1]["gas_payment_by_hh_per_type_no_ben"] - benefits); 
      hhtypes[i+2]["ann_combined_payment_per_hh_per_hhtype_w_ben"] = (hhtypes[i]["elec_payment_by_hh_per_type_no_ben"] + hhtypes[i+2]["gas_payment_by_hh_per_type_no_ben"] - benefits);
      i++;
    } 
    var i = 7;
    while (i<=13) {
      hhtypes[i]["ann_combined_payment_per_hh_per_hhtype_w_ben"] = (hhtypes[i]["elec_payment_by_hh_per_type_no_ben"] + hhtypes[i]["gas_payment_by_hh_per_type_no_ben"]);
      hhtypes[i+1]["ann_combined_payment_per_hh_per_hhtype_w_ben"] = (hhtypes[i+1]["elec_payment_by_hh_per_type_no_ben"] + hhtypes[i+1]["gas_payment_by_hh_per_type_no_ben"]); 
      hhtypes[i+2]["ann_combined_payment_per_hh_per_hhtype_w_ben"] = (hhtypes[i]["elec_payment_by_hh_per_type_no_ben"] + hhtypes[i+2]["gas_payment_by_hh_per_type_no_ben"]);
      i++;
    }
    var result12 = combined_cost_burden_after_benefits(myob, hhtypes);
    return result12;
}

// 13
function combined_cost_burden_after_benefits(ob, hhs) {
    var myob = ob;
    var hhtypes = hhs;
    var i = 1;
    while (i<=13) {
      hhtypes[i]["combined_cost_burden_after_benefits"] = (hhtypes[i]["ann_combined_payment_per_hh_per_hhtype_w_ben"]/hhtypes[i]["income"]);
      hhtypes[i+1]["combined_cost_burden_after_benefits"] = (hhtypes[i+1]["ann_combined_payment_per_hh_per_hhtype_w_ben"]/hhtypes[i+1]["income"]);
      hhtypes[i+2]["combined_cost_burden_after_benefits"] = (hhtypes[i+2]["ann_combined_payment_per_hh_per_hhtype_w_ben"]/hhtypes[i+2]["income"]);
      i++;
    } 
    var gas_list = [];
    var i = 1;
    while (i <= 15) {
      gas_list.push(hhtypes[i]["gas_burden_before_benefits"]*100);
      i += 1;
    }
    var elec_list = [];
    var i = 1;
    while (i <= 15) {
      elec_list.push(hhtypes[i]["elec_burden_before_benefits"]*100);
      i += 1;
    }
    var combined_list = [];
    var i = 1;
    while (i <= 15) {
      combined_list.push(hhtypes[i]["combined_cost_burden_after_benefits"]*100);
      i += 1;
    }
    var revenue = getRevenue(hhtypes);

    var result13 = [gas_list, elec_list, combined_list, revenue, myob, hhtypes];
    return result13;
  }

function displayChart(gas_before_ben, elec_before_ben, combined_w_ben, revtypes_initial, revtypes_final) {
    var gas = gas_before_ben;
    var elec = elec_before_ben;
    var comb = combined_w_ben;
    var rev_i = revtypes_initial;
    var rev_f = revtypes_final;
    var gas_round = gas.map(i => Math.round(parseFloat(i)*1000)/1000);
    var elec_round = elec.map(i => Math.round(parseFloat(i)*1000)/1000);
    var comb_round = comb.map(i => Math.round(parseFloat(i)*1000)/1000);
    var rev_i_round = rev_i.map(i => Math.round(parseFloat(i)*100)/100);
    var rev_f_round = rev_f.map(i => Math.round(parseFloat(i)*100)/100);
    var ctx = document.getElementById("myChart");
    var burdenchart = new Chart(ctx, {
      // The type of chart we want to create
      type: 'bar',
      // The data for our dataset
      data: {
        labels: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15"],
        datasets: [{
            label: "Default Gas Cost Burden",
            fontSize: 20,
            backgroundColor: "rgb(50, 40, 120)",
            borderColor: "rgb(255, 99, 132)",
            stack: "Stack 0",
            data: [gas_round[0], gas_round[1], gas_round[2], gas_round[3], gas_round[4], gas_round[5], gas_round[6], gas_round[7], gas_round[8], gas_round[9], gas_round[10], gas_round[11], gas_round[12], gas_round[13], gas_round[14]]
          },
          {
            label: "Default Electricity Cost Burden",
            backgroundColor: "rgb(50, 40, 200)",
            borderColor: "rgb(255, 99, 132)",
            stack: "Stack 0",
            data: [elec_round[0], elec_round[1], elec_round[2], elec_round[3], elec_round[4], elec_round[5], elec_round[6], elec_round[7], elec_round[8], elec_round[9], elec_round[10], elec_round[11], elec_round[12], elec_round[13], elec_round[14]]
          },
          {
            label: "Combined Cost Burden After Benefits",
            backgroundColor: "rgb(110, 0, 255)",
            borderColor: "rgb(255, 99, 132)",
            stack: "Stack 1",
            data: [comb_round[0], comb_round[1], comb_round[2], comb_round[3], comb_round[4], comb_round[5], comb_round[6], comb_round[7], comb_round[8], comb_round[9], comb_round[10], comb_round[11], comb_round[12], comb_round[13], comb_round[14]]
          }
        ]
      },
      options: {
        barValueSpacing: 50,
        responsive: true,
        maintainAspectRatio: false,
        title: {
          display: true,
          text: "Utility Cost Burden (% of Taxed Annual Household Income Paid Towards Utilities) Before vs. After Modifications",
          fontSize: 25,
        },
        legend: {
          display: true,
          labels: {
            fontSize: 20
          }
        },
        layout: {
          padding: {
            left: 30,
            right: 30,
            top: 50,
            bottom: 30
          }
        },
        scales: {
          xAxes: [{
            stacked: true,
            scaleLabel: {
              display: true,
              labelString: 'Household Category',
              fontSize: 20,
            },
            ticks: {
              autoSkip: false,
              fontSize: 20,
            }
          }],          
          yAxes: [{
            stacked: true,
            scaleLabel: {
              display: true,
              labelString: 'Utility Cost Burden',
              fontSize: 20,
            },
            ticks: {
              autoSkip: false,
              fontSize: 20,
            }
          }]
        }
      }
    });
    var myrev = document.getElementById("revChart");
    var revenuechart = new Chart(myrev, {
      // The type of chart we want to create
      type: 'bar',
      // The data for our dataset
      data: {
        labels: ["Before", "After"],
        datasets: [{
            label: "Gas Revenue",
            fontSize: 20,
            backgroundColor: "rgb(50, 40, 120)",
            borderColor: "rgb(255, 99, 132)",
            stack: "Stack 0",
            data: [parseFloat(rev_i_round[1]), parseFloat(rev_f_round[1])]
          },
          {
            label: "Electricity Revenue",
            backgroundColor: "rgb(50, 40, 200)",
            borderColor: "rgb(255, 99, 132)",
            stack: "Stack 0",
            data: [parseFloat(rev_i_round[0]), parseFloat(rev_f_round[0])]
          },
          {
            label: "Total Revenue",
            backgroundColor: "rgb(110, 0, 255)",
            borderColor: "rgb(255, 99, 132)",
            stack: "Stack 1",
            data: [parseFloat(rev_i_round[0]) + parseFloat(rev_i_round[1]), parseFloat(rev_f_round[0]) + parseFloat(rev_f_round[1])]
          },
        ]
      },
      options: {
        barValueSpacing: 700,
        responsive: true,
        maintainAspectRatio: false,
        title: {
          display: true,
          text: "Revenue Before vs. After Modifications",
          fontSize: 25,
        },
        legend: {
          display: true,
          labels: {
            fontSize: 20,
          }
        },
        layout: {
          padding: {
            left: 30,
            right: 30,
            top: 50,
            bottom: 30,
          }
        },
        scales: {
          xAxes: [{
            stacked: true,
            scaleLabel: {
              display: true,
              labelString: "Time With Respect to Application of Modifications",
              fontSize: 20,
            },
            ticks: {
              autoSkip: false,
              fontSize: 20,
            }
          }],          
          yAxes: [{
            stacked: true,
            scaleLabel: {
              display: true,
              labelString: 'Revenue (Dollars)',
              fontSize: 20,
            },
            ticks: {
              autoSkip: false,
              fontSize: 20,
              stepSize: 500000000
            }
          }]
        }
      }
    });
    return rev_f;
  };

function getRevenue(mydict) {
   var hhtypes = mydict;
   var i = 1;
   var elec_rev = 0;
   var gas_rev = 0;
   while (i <= 15) {
      elec_rev += hhtypes[i]["elec_payment_by_type"];
      gas_rev += hhtypes[i]["gas_payment_by_type"];
      i += 1;
   }
   var revtypes = [elec_rev, gas_rev];
   return revtypes;
}

function comma_thousands(n) {
    return n.toString().replace(/\B(?<!\.\d*)(?=(\d{3})+(?!\d))/g, ",");
}

function newData(chart, label, data) {
  chart.data.labels.push(label);
  chart.data.datasets.forEach((dataset) => {
    dataset.data.push(data);
  });
  chart.update();  
}

function calcVerdict(final_revenue, ob, hhs) {
  var revenue = final_revenue;
  var myob = ob;
  var hhtypes = hhs;
  if (hhtypes[3]["combined_cost_burden_after_benefits"] > 0.06) {
    document.getElementById("verdict").innerHTML = `The highest consumption, lowest income category experiences a cost burden that is ${((Math.round(hhtypes[3]["combined_cost_burden_after_benefits"]*100) / 100) /0.06)*100+'%'} of the upper threshold for energy cost burden (6% of annual household income after taxes).  The energy cost burden for the first household category is ${((Math.round(hhtypes[1]["combined_cost_burden_after_benefits"]*100)/100)*100)+'%'}, the energy cost burden for the second household category is ${((Math.round(hhtypes[2]["combined_cost_burden_after_benefits"]*100)/100)*100)+'%'}, and the energy cost burden for the third household category is ${((Math.round(hhtypes[3]["combined_cost_burden_after_benefits"]*100)/100)*100)+'%'}. You may want to increase benefits or reduce charges.` + "<br><br>";
  }
  // maybe implement function that calculates value needed when all other values stay constant, for multiple values
  if (revenue < myob["total_expense"]) {
    document.getElementById("verdict").innerHTML += `The lower threshold for revenue (${Math.round(myob["total_expense"]*100)/100}) has not been met; the current revenue is $${comma_thousands(Math.round(final_revenue*100)/100)}. You may want to focus on increasing your entered charges.` + "<br><br>"; 
  } else if (revenue > myob["maximum_revenue"]) {
    document.getElementById("verdict").innerHTML += `The current revenue ($${comma_thousands(Math.round(final_revenue*100)/100)}) is above the upper threshold for revenue ($${comma_thousands(myob["maximum_revenue"])}). You may want to focus on lowering your entered charges.` + "<br><br>";
  } else {
    document.getElementById("verdict").innerHTML += `The current revenue is $${comma_thousands(Math.round(final_revenue*100)/100)}.`;
  }
  if (hhtypes[3]["combined_cost_burden_after_benefits"] <= 0.06 && revenue >= myob["total_expense"]){ 
    document.getElementById("verdict").innerHTML += "All constraints have been met!";
  }
}


var mykeys = getKys();
var sample = [3184496, 20.24, 0.20, 837631, 25, 1.239329, 4090, 1000, 4000000000, 2809850666.67, 1.163, 1.2, 9500, 29200, 55700, 94700, 253100, 0, 0, 0, 0, 46.50];
var myvals = getValues();
var dict = makeDictionary(mykeys, sample);
var newdict = makeDictionary(mykeys, myvals);
function newinputs() {
  document.getElementById('form1').style.display = 'block';
}
document.getElementById("myb").addEventListener("click", newinputs);

function replaceDefault() {
  document.getElementById('form1').style.display = 'block';
  var sample = myvals; //////////XXXXXXXXXXXXXXX
}
document.getElementById("replaceb").addEventListener("click", replaceDefault);
var check = displayChart(dict[0], dict[1], newdict[2], dict[3], newdict[3]); 
var revenuesum = parseFloat(check[0]) + parseFloat(check[1]);
calcVerdict(revenuesum, newdict[4], newdict[5]);
</script>
</body>
</html>
