<!DOCTYPE html>
<html lang="en-us">
<meta charset="UTF-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta name="author" content="Adrienne Cheung">
<meta name="description" content="Calculator for Equity and Utility">
<head>
<link rel="stylesheet" type="text/css" href="stylesheet.css">
<script language="JavaScript" src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js"></script> 
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
</head>
<body style="background-color: rgb(0,0,90);">

<center>
<button class = "link" onclick="document.location = 'Introduction.htm'">View Documentation</button>
</center>

<div class="title">
<h1><center>Calculator for Equity: Utility Pricing for the Residential Sector</center></h1>
</div>


<table class="center" id="mytable">
  <tr>
  <th colspan="5" style="background-color: rgb(50, 40, 200)">Household Categories</th>
  </tr>
  <tr>
  <th style="background-color: rgb(0, 110, 255)" rowspan="2" colspan="2"></th>
  <th colspan="3" style="background-color: rgb(0, 110, 255)">Consumption</th>
  </tr>
  <tr style="background-color:rgb(0,0,0)">
    <th style="background-color: rgb(0, 110, 255)">Low</th> 
    <th style="background-color: rgb(0, 110, 255)">Medium</th> 
    <th style="background-color: rgb(0, 110, 255)">High</th> 
  </tr>
  <tr>
    <th rowspan="5" style="background-color: rgb(0, 110, 255)">Income Quintile (Q)</th>
    <th style="background-color: rgb(0, 110, 255)">1 (Lowest) </th>
    <td>Q1Low</td>
    <td>Q1Med</td>
    <td>Q1High</td>
  </tr>
  <tr>
  <th style="background-color: rgb(0, 110, 255)">2</th>
  <td>Q2Low</td>
  <td>Q2Med</td>
  <td>Q2High</td>
  </tr>
  <tr>
  <th style="background-color: rgb(0, 110, 255)">3</th>
  <td>Q3Low</td>
  <td>Q3Med</td>
  <td>Q4High</td>
  </tr>
  <tr>
  <th style="background-color: rgb(0, 110, 255)">4</th>
  <td>Q4Low</td>
  <td>Q4Med</td>
  <td>Q4High</td>
  </tr>
  <tr>
  <th style="background-color: rgb(0, 110, 255)">5 (Highest)</th>
  <td>Q5Low</td>
  <td>Q5Med</td>
  <td>Q5High</td>
  </tr>
</table>

<div class = "main">
<center><canvas id="burdenChart" width="500" height="500"></canvas></center>
<center><canvas id="revChart" width="500" height="700"></canvas></center>
<center><canvas id="burdenHistory" width="500" height="500"></canvas></center>
<center><canvas id="revenueHistory" width="500" height="700"></canvas></center>
</div>

<div class="main" style="width: 80%; margin: 10px auto; max-width: 1200px; overflow-x:auto">
<p id = "burden"></p>
<p id = "revenue"></p>
<p id = "conclusion"></p>
  <center><button class = "reveal_form" id="myb">Enter New Inputs</button></center>
  <!-- form for user of website tool to enter values to be used in calculations -->
  <form action="next.htm" id = "form1" style="display:none" method="GET">
    <p>*All questions refer only to figures relating to residential consumers.  Please leave blank any queries for which data is unavailable, or provide an estimate.</p>
    
    
    <p>*Additionally, please ensure consistency between units of energy of the same type (for instance, do not alternate between usage of dekatherms and therms for gas-related values in dekatherms)</p>
    
    
    <p>*Please enter monetary values in dollars and cents.</p>
    
    
    <p>*If you do not enter any values, sample data for New York City will be utilized.</p> 
    
    
    
    
    <label for="elec_households"><center>Please provide the number of households consuming electricity.</center></label>
    <input type="number" id="elec_households" value=3184496 name="elec_households">
    
    <label for="fix_electric_charge" style = "width: 900px; display: inline-block;  font-size: 1.4em; font-family: 'Georgia', 'serif'"><center>Please provide the sum of the average monthly fixed charge for electricity.</center></label>
    <input type="number" step = "0.01" id="fix_elec_charge" value=20.24 name="fix_elec_charge">
    
    <label for="var_elec_charge"><center>Please provide the sum of the average variable charge per unit for electricity.</center></label>
    <input type="number" step = "0.01" id="var_elec_charge" value= 0.20 name="var_elec_charge">
    
    <label for="gas_households"><center>Please provide the number of households consuming gas.</center></label>
    <input type="number" id="gas_households" value=837631 name="gas_households">
    
    <label for="fix_gas_charge"><center>Please provide the sum of the average monthly fixed charge for gas.</center></label>
    <input type="number" step = "0.01" id="fix_gas_charge" value=25.00 name="fix_gas_charge">
    
    <label for="var_gas_charge"><center>Please provide the sum of the average variable charge per unit for gas.</center></label>
    <input type="number" step = "0.01" id="var_gas_charge" value=1.24 name="var_gas_charge">
    
    <label for="avg_elec_consumption"><center>Please provide the average annual electricity consumption.</center></label>
    <input type="number" step = "0.01" id="avg_elec_consumption" value=3600 name="avg_elec_consumption">
    
    <label for="avg_gas_consumption"><center>Please provide the average annual gas consumption.</center></label>
    <input type="number" step = "0.01" id="avg_gas_consumption" value=1000 name="avg_gas_consumption">
    
    <label for="maximum_revenue"><center>Please provide the maximum allowed annual revenue for gas and electricity sales.</center></label>
    <input type="number" step = "0.01" id="maximum_revenue" value=4000000000.00 name="maximum_revenue">
    
    <label for="total_expense"><center>Please provide the estimated total expense associated with providing electricity/gas to the households in question.</center></label>
    <input type="number" step = "0.01" id="total_expense" value=2809850666.67 name="total_expense">
    
    
    
    <label for="elec_usage_ratio"><center>Please provide a relative demand factor for defining the difference between low, medium, and high electric usage. *If, for instance, the number 2 is provided, the usage will double from lower household category to higher household category (see table for household category definitions).</center></label>
    <input type="number" step = "0.001" id="elec_usage_ratio" value=1.159 name="elec_usage_ratio">
    <center><p style="font-size:1.3em">"*If, for instance, the number 2 is provided, the usage will double from lower household category to higher household category (see table for household category definitions)."</p></center>
    
    
    
    <label for="gas_usage_ratio"><center>Please provide a relative demand factor for defining the difference between low, medium, and high gas usage.</center></label>
    <input type="number" step = "0.001" id="gas_usage_ratio" value=1.2 name="gas_usage_ratio">
    <center><p style="font-size:1.3em">"*If, for instance, the number 2 is provided, the usage will double from lower household category to higher household category (see table for household category definitions)."</p></center>
    
    
    
    <label for="q_one"><center>Please input the average annual income for the first income quintile of residential consumers. </center></label>
    <input type="number" id="quintile_one" value=9500 name="quintile_one">
    
    <label for="q_two"><center>Please input the average annual income for the second income quintile of residential consumers.</center></label>
    <input type="number" id="quintile_two" value=29200 name="quintile_two">
    
    <label for="q_three"><center>Please input the average annual income for the third income quintile of residential consumers.</center></label>
    <input type="number" id="quintile_three" value=55700 name="quintile_three">
    
    <label for="q_four"><center>Please input the average annual income for the fourth income quintile of residential consumers.</center></label>
    <input type="number" id="quintile_four" value=94700 name="quintile_four">
    
    <label for="q_five"><center>Please input the average annual income for the fifth income quintile of residential consumers.</center></label>
    <input type="number" id="quintile_five" value=253100 name="quintile_five">
    
    <label for="multiplier_for_fix_charge"><center>Please input the number by which you want to multiply the current fixed charges in order to decrease them.</center></label>
    <input type="number" step = "0.00001" id="multiplier_for_fix_charge" value=1 name="multiplier_for_fix_charge">
    
    <label for="multiplier_for_var_charge"><center>Please input the number by which you want to multiply the current variable charges in order to increase them.</center></label>
    <input type="number" step = "0.00001" id="multiplier_for_var_charge" value=1 name="multiplier_for_var_charge">
    
    <label for="add_monthly_elec_charge_for_high_usage"><center>Please input any desired additional fixed monthly charge for electricity usage for household category Q5High.</center></label>
    <input type="number" step = "0.0001" id="add_monthly_elec_charge_for_high_usage" value=0 name="add_monthly_elec_charge_for_high_usage">
    
    <label for="add_monthly_gas_charge_for_high_usage"><center>Please input any desired additional fixed monthly charge for gas usage for household category Q5High.</center></label>
    <input type="number" step = "0.0001" id="add_monthly_gas_charge_for_high_usage" value= 0 name="add_monthly_gas_charge_for_high_usage">
    
    <label for="add_monthly_elec_charge_for_sec_high_usage"><center>Please input any desired additional fixed monthly charge for electricity usage for household categories Q4High and Q5Med.</center></label>
    <input type="number" step = "0.0001" id="add_monthly_elec_charge_for_sec_high_usage" value=0 name="add_monthly_elec_charge_for_sec_high_usage">
    
    <label for="add_monthly_gas_charge_for_sec_high_usage"><center>Please input any desired additional fixed monthly charge for gas usage for household categories Q4High and Q5Med.</center></label>
    <input type="number" class = "entry" step = "0.0001" id="add_monthly_gas_charge_for_sec_high_usage" value= 0 name="add_monthly_gas_charge_for_sec_high_usage">
     
    <label for="benefits"><center>Please input the average monthly utility benefits for residential consumers who receive said benefits.</center></label>
    <input type="number" class = "entry" step = "0.01" id="benefits" value=46.50 name="benefits">
    <input type='hidden' name='q' id='sample_keep_or_replace' value=1>
    <p>If you would like to see how the combined cost burden for each household category and the revenue obtained using your newly entered values measure up against the results calculated using previous values, you may want to press the first button below.</p>
    <p>If you would like to replace the existing default values with your most recently entered values, you may want to press the second button. </p>
    <p>If you would simply like to compare your most recent results with the website's sample results, you may prefer to press the last button.</p> 
    <center><button class="switch_page" type="button" id = "graph_new">Display New Results in Graph With Previously Obtained Results</button></center>
    <center><button class="switch_page" id="default_replace">Replace Default Values with Entered Values (Graph With Result History Will Reset)</button></center> 
    <center><button class="switch_page" id="default_keep">Revert to Original Default Values (Graph With Result History Will Reset)</button></center>
    </form>

</div>
<script language="JavaScript" src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js"></script> 
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<meta charset="utf-8" />
<title>Calculated Results</title>
<script language="JavaScript">

// edit: below values come in this order: number of households using electricity, fixed charge for electricity, variable charge for electricity, fixed charge for gas, variable charge for gas, average annual usage of electricity for all households, average annual usage of gas for all households, average annual income for first income quintile, average annual income for second income quintile, average annual income for third income quintile, average annual income for fourth income quintile, average annual income for fifth income quintile, averag equantitiy of federal utility benefits
var sample = [3184496.00, 20.2400, 0.20, 837631.00, 25.00, 1.24, 3600, 1000.00, 4000000000.00, 2809850666.67, 1.159, 1.200, 9500, 29200.00, 55700.00, 94700.00, 253100.00, 1, 1, 0, 0, 0, 0, 46.50, 1];


//
document.getElementById("default_replace").addEventListener("click", replace);
document.getElementById("default_keep").addEventListener("click", keep);



// value of 0 or 1 is assigned to hidden form field to be passed to next page
function replace() {
  document.getElementById("sample_keep_or_replace").value = 0;
  var windowkeys = getKys();
  var windowvals = getValues(windowkeys);
  sample = windowvals;

}

function keep() {
  document.getElementById("sample_keep_or_replace").value = 1;
}



// XXXXXXXX 1. lower fixed charge 2. increase block rate xxxxxxxx output how far away you are from 0.06. prompt user to change constraints, give feedback.XXXXXXXXX combinedrm users of severity of problem. xxxxxxxx save scenarios xxxxxxxxxx maybe clue user in as to where most of the issues are and which values to prioritize changing

// gets keys (for which values were requested in the form) from text in window search bar
function getKys() {
    var s = window.location.search.replace(/[0-9]/g, ",").replace(/\W/ig, ',').replace(/,+/g,',');
    var s = s.replace("one", "1").replace("two", "2").replace("three", "3").replace("four", "4").replace("five", "5");
    var kys = s.substr(1,s.length-2).split(',');
    return kys;
}

// gets values (the numerical inputs) from text in window search bar


function getValues(kys) {
    var mykeys = kys;
    var s = window.location.search.replace(/[^\d.-]/g, ',').replace(/,+/g,',');
    var vals = s.substr(1, s.length-1).split(','); 
    return vals;
}

// list of default values that will be used if a corresponding value was not typed into the form

// combines the keys and values into one dictionary where each key corresponds to a value
function makeDictionary(mykeys, vals, decide) {
    var mykys = mykeys;
    var myvals = vals;
    var ob = {};
    if (decide == 1) {
      for (var i = 0; i < mykys.length; i++) {
          ob[mykys[i]] = (myvals[i]) ? [parseFloat(myvals[i])] : [parseFloat(sample[i])];
      }
    } else {
      for (var i = 0; i < mykys.length; i++) {
          ob[mykys[i]] = [parseFloat(myvals[i])];
      }
    }
    var output = '';
    for (var property in ob) {
        output += property + ': ' + ob[property]+'; ';
    }
    var myresult = hhcategories(ob);
    alert(ob["benefits"]);
    return myresult;
}

// uses values from dictionary to construct household categories


// creates household categories with respective mean annual incomes

function hhcategories(ob) {
    var myob = ob;
    var i = 1;
    var quint = 1;
    var hhtypes = { };
    while (i<=15) {
      hhtypes[i] = { };
      i+=1;
    }
    var i = 1;
    while (quint<=5) {
      var qnum = `quintile_${ quint }`;
      hhtypes[i]["income"] = parseFloat(myob[qnum]);
      hhtypes[i+1]["income"] = parseFloat(myob[qnum]).toFixed(2);
      hhtypes[i+2]["income"] = parseFloat(myob[qnum]).toFixed(2);
      i+=3;
      quint++;
    }
    var result0 = proportion(ob, hhtypes);
    return result0;
}

// values in list "prop" are based off values from Pearson-Tukey approximation method


// assigns the appropriate Pearson-Tukey distribution values to household categories

function proportion(ob, hhs) {
    var hhtypes = hhs;
    var myob = ob;
    var prop = [0.037, 0.126, 0.037];
    var i = 1;
    var ratio = 0;
    while (i <= 13) {
      hhtypes[i]["distribution"] = parseFloat(prop[ratio]);
      hhtypes[i+1]["distribution"] = parseFloat(prop[ratio+1]);
      hhtypes[i+2]["distribution"] = parseFloat(prop[ratio+2]);
      i+=3;
    }
    var result1 = elec_usage_vals(myob, hhtypes);
    return result1;
}



// calculates and assigns annual electricity consumption for each household category

function elec_usage_vals(ob, hhs) {
    var myob = ob;
    var hhtypes = hhs;
    var avg_elec_consumption = parseFloat(myob["avg_elec_consumption"]);
    var i = 1;
    var elec_usage_ratio = parseFloat(myob["elec_usage_ratio"]);
    var pow = 3;
    while (i<=13) {
      hhtypes[i]["elec_usage_category"] = avg_elec_consumption/(elec_usage_ratio**(pow));
      hhtypes[i+1]["elec_usage_category"] = avg_elec_consumption/(elec_usage_ratio**(pow-1));
      hhtypes[i+2]["elec_usage_category"] = avg_elec_consumption/(elec_usage_ratio**(pow-2));
      i +=3;
      pow -=1;
    }   
    var result2 = ann_elec_consumption(myob, hhtypes);
    return result2;
}



// calculates and assigns annual electricity consumption for each household per household category

function ann_elec_consumption(ob, hhs) {
    var myob = ob;
    var hhtypes = hhs;
    var elec_households = myob["elec_households"];
    var i = 1;
    while (i<=13) {
      hhtypes[i]["ann_elec_per_type"] = elec_households * hhtypes[i]["distribution"] * hhtypes[i]["elec_usage_category"];
      hhtypes[i+1]["ann_elec_per_type"] = elec_households * hhtypes[i+1]["distribution"] * hhtypes[i+1]["elec_usage_category"];
      hhtypes[i+2]["ann_elec_per_type"] = elec_households * hhtypes[i+2]["distribution"] * hhtypes[i+2]["elec_usage_category"];
      i++;
    } 
  
    var result3 = ann_elec_payment_per_hhtype(myob, hhtypes);
    return result3;
}


// calculates and assigns annual electricity payment for each household category

function ann_elec_payment_per_hhtype(ob, hhs) {
    var myob = ob;
    var hhtypes = hhs;
    var elec_households = myob["elec_households"];
    var var_elec_charge = myob["var_elec_charge"];
    var fix_elec_charge = myob["fix_elec_charge"];
    var multiplier_for_fix_charge = myob["multiplier_for_fix_charge"];
    var multiplier_for_var_charge = myob["multiplier_for_var_charge"];
    var add_elec_high = myob["add_monthly_elec_charge_for_high_usage"];
    var add_elec_sec_high = myob["add_monthly_elec_charge_for_sec_high_usage"];
    var i = 1;
    while (i<=13) {
      hhtypes[i]["elec_payment_by_type"] = hhtypes[i]["ann_elec_per_type"] * var_elec_charge * multiplier_for_var_charge + elec_households * hhtypes[i]["distribution"] * 12 * fix_elec_charge * multiplier_for_fix_charge;
      hhtypes[i+1]["elec_payment_by_type"] = hhtypes[i+1]["ann_elec_per_type"] * var_elec_charge * multiplier_for_var_charge + elec_households * hhtypes[i+1]["distribution"] * 12 * fix_elec_charge * multiplier_for_fix_charge;
      hhtypes[i+2]["elec_payment_by_type"] = hhtypes[i+2]["ann_elec_per_type"] * var_elec_charge * multiplier_for_var_charge + elec_households * hhtypes[i+2]["distribution"] * 12 * fix_elec_charge * multiplier_for_fix_charge;
      i++;
    } 
    hhtypes[12]["elec_payment_by_type"] = hhtypes[12]["ann_elec_per_type"] * var_elec_charge * multiplier_for_var_charge + elec_households * hhtypes[i]["distribution"] * 12 * fix_elec_charge * multiplier_for_fix_charge + elec_households * hhtypes[12]["distribution"] * 12 * add_elec_sec_high;
    hhtypes[14]["elec_payment_by_type"] = hhtypes[14]["ann_elec_per_type"] * var_elec_charge * multiplier_for_var_charge + elec_households * hhtypes[i]["distribution"] * 12 * fix_elec_charge * multiplier_for_fix_charge + elec_households * hhtypes[14]["distribution"] * 12 * add_elec_sec_high;
    hhtypes[15]["elec_payment_by_type"] = hhtypes[15]["ann_elec_per_type"] * var_elec_charge * multiplier_for_var_charge + elec_households * hhtypes[i]["distribution"] * 12 * fix_elec_charge * multiplier_for_fix_charge + elec_households * hhtypes[15]["distribution"] * 12 * add_elec_high; 
    var result4 = ann_elec_payment_per_hh_per_hhtype_before_benefits(myob, hhtypes);
    return result4;
}



// calculates and assigns annual electricity payment for household per household category before benefits

function ann_elec_payment_per_hh_per_hhtype_before_benefits(ob, hhs) {
    var myob = ob;
    var hhtypes = hhs;
    var elec_households = myob["elec_households"];
    var i = 1;
    while (i<=13) {
      hhtypes[i]["elec_payment_by_hh_per_type_no_ben"] = hhtypes[i]["elec_payment_by_type"]/(elec_households*hhtypes[i]["distribution"]);
      hhtypes[i+1]["elec_payment_by_hh_per_type_no_ben"] = hhtypes[i+1]["elec_payment_by_type"]/(elec_households*hhtypes[i+1]["distribution"]); 
      hhtypes[i+2]["elec_payment_by_hh_per_type_no_ben"] = hhtypes[i+2]["elec_payment_by_type"]/(elec_households*hhtypes[i+2]["distribution"]);
      i++;
    } 

    var result5 = elec_burden_before_benefits(myob, hhtypes);
    return result5;
}




// calculates and assigns burden from electricity payments for each household category before benefits

function elec_burden_before_benefits(ob, hhs) {
    var myob = ob;
    var hhtypes = hhs;
    var i = 1;
    while (i<=13) {
      hhtypes[i]["elec_burden_before_benefits"] = (hhtypes[i]["elec_payment_by_hh_per_type_no_ben"]/hhtypes[i]["income"]);
      hhtypes[i+1]["elec_burden_before_benefits"] = (hhtypes[i+1]["elec_payment_by_hh_per_type_no_ben"]/hhtypes[i+1]["income"]);
      hhtypes[i+2]["elec_burden_before_benefits"] = (hhtypes[i+2]["elec_payment_by_hh_per_type_no_ben"]/hhtypes[i+2]["income"]);
      i++;
    } 
    
    var result6 = gas_usage_vals(myob, hhtypes);   
    return result6;
}


// calculates and assigns annual gas consumption for each household category

function gas_usage_vals(ob, hhs) {
    var myob = ob;
    var hhtypes = hhs;
    var i = 1;
    var pow = 3;
    while (i<=13) {
      hhtypes[i]["gas_usage_category"] = (parseFloat(myob["avg_gas_consumption"]/(myob["gas_usage_ratio"]**(pow))));
      hhtypes[i+1]["gas_usage_category"] = (parseFloat(myob["avg_gas_consumption"]/(myob["gas_usage_ratio"]**(pow-1))));
      hhtypes[i+2]["gas_usage_category"] = (parseFloat(myob["avg_gas_consumption"]/(myob["gas_usage_ratio"]**(pow-2))));
      i+=3;
      pow-=1;
    }   
    var result7 = ann_gas_consumption(myob, hhtypes);
    return result7;
}



// calculates and assigns annual gas consumption for each household per household category

function ann_gas_consumption(ob, hhs) {
    var myob = ob;
    var hhtypes = hhs;
    var i = 1;
    while (i<=13) {
      hhtypes[i]["ann_gas_per_type"] = (myob["gas_households"] * hhtypes[i]["distribution"] * hhtypes[i]["gas_usage_category"]);
      hhtypes[i+1]["ann_gas_per_type"] = (myob["gas_households"] * hhtypes[i+1]["distribution"] * hhtypes[i+1]["gas_usage_category"]); 
      hhtypes[i+2]["ann_gas_per_type"] = (myob["gas_households"] * hhtypes[i+2]["distribution"] * hhtypes[i+2]["gas_usage_category"]);
      i++;
    } 
    var result8 = ann_gas_payment_per_hhtype(myob, hhtypes);
    return result8;
}



// calculates and assigns annual gas payment per household category

function ann_gas_payment_per_hhtype(ob, hhs) {
    var myob = ob;
    var hhtypes = hhs;
    var gas_households = myob["gas_households"];
    var var_gas_charge = myob["var_gas_charge"];
    var fix_gas_charge = myob["fix_gas_charge"];
    var multiplier_for_fix_charge = myob["multiplier_for_fix_charge"];
    var multiplier_for_var_charge = myob["multiplier_for_var_charge"];
    var add_gas_high = myob["add_monthly_gas_charge_for_high_usage"];
    var add_gas_sec_high = myob["add_monthly_gas_charge_for_sec_high_usage"];
    var i = 1;
    while (i<=11) {
      hhtypes[i]["gas_payment_by_type"] = (hhtypes[i]["ann_gas_per_type"] * var_gas_charge * multiplier_for_var_charge + gas_households * hhtypes[i]["distribution"] * 12 * fix_gas_charge * multiplier_for_fix_charge);
      hhtypes[i+1]["gas_payment_by_type"] = (hhtypes[i+1]["ann_gas_per_type"] * var_gas_charge * multiplier_for_var_charge + gas_households * hhtypes[i+1]["distribution"] * 12 * fix_gas_charge * multiplier_for_fix_charge);
      hhtypes[i+2]["gas_payment_by_type"] = (hhtypes[i+2]["ann_gas_per_type"] * var_gas_charge * multiplier_for_var_charge + gas_households * hhtypes[i+2]["distribution"] * 12 * fix_gas_charge * multiplier_for_fix_charge);
      hhtypes[i+3]["gas_payment_by_type"] = (hhtypes[i+3]["ann_gas_per_type"] * var_gas_charge * multiplier_for_var_charge + gas_households * hhtypes[i+3]["distribution"] * 12 * fix_gas_charge * multiplier_for_fix_charge);
      hhtypes[i+4]["gas_payment_by_type"] = (hhtypes[i+4]["ann_gas_per_type"] * var_gas_charge * multiplier_for_var_charge + gas_households * hhtypes[i+4]["distribution"] * 12 * fix_gas_charge * multiplier_for_fix_charge);
      i++;
    } 

    // upper three consumption categories are recalculated to account for any additional charges imposed due to high consumption

    hhtypes[12]["gas_payment_by_type"] = hhtypes[12]["ann_gas_per_type"] * var_gas_charge * multiplier_for_var_charge + gas_households * hhtypes[12]["distribution"] * 12 * fix_gas_charge * multiplier_for_fix_charge + gas_households * hhtypes[12]["distribution"] * 12 * add_gas_sec_high;
    hhtypes[14]["gas_payment_by_type"] = hhtypes[14]["ann_gas_per_type"] * var_gas_charge * multiplier_for_var_charge + gas_households * hhtypes[14]["distribution"] * 12 * fix_gas_charge * multiplier_for_fix_charge + gas_households * hhtypes[14]["distribution"] * 12 * add_gas_sec_high;
    hhtypes[15]["gas_payment_by_type"] = hhtypes[15]["ann_gas_per_type"] * var_gas_charge * multiplier_for_var_charge + gas_households * hhtypes[15]["distribution"] * 12 * fix_gas_charge * multiplier_for_fix_charge + gas_households * hhtypes[15]["distribution"] * 12 * add_gas_high; 
    var result9 = ann_gas_payment_per_hh_per_hhtype_before_benefits(myob, hhtypes);
    return result9;
}



// calculates and assigns annual gas payment for household per household category before benefits


function ann_gas_payment_per_hh_per_hhtype_before_benefits(ob, hhs) {
    var myob = ob;
    var hhtypes = hhs;
    var gas_households = myob["gas_households"];
    var i = 1;
    while (i<=13) {
      hhtypes[i]["gas_payment_by_hh_per_type_no_ben"] = hhtypes[i]["gas_payment_by_type"]/(gas_households*hhtypes[i]["distribution"]);
      hhtypes[i+1]["gas_payment_by_hh_per_type_no_ben"] = hhtypes[i+1]["gas_payment_by_type"]/(gas_households*hhtypes[i+1]["distribution"]);
      hhtypes[i+2]["gas_payment_by_hh_per_type_no_ben"] = hhtypes[i+2]["gas_payment_by_type"]/(gas_households*hhtypes[i+2]["distribution"]);
      i++;
    }  
    result10 = gas_burden_before_benefits(myob, hhtypes);
    return result10;
}




// calculates and assigns burden from gas payments for each household category before benefits


function gas_burden_before_benefits(ob, hhs) {
    var myob = ob;
    var hhtypes = hhs;
    var i = 1;
    while (i<=13) {
      hhtypes[i]["gas_burden_before_benefits"] = (hhtypes[i]["gas_payment_by_hh_per_type_no_ben"]/hhtypes[i]["income"]);
      hhtypes[i+1]["gas_burden_before_benefits"] = (hhtypes[i+1]["gas_payment_by_hh_per_type_no_ben"]/hhtypes[i+1]["income"]); 
      hhtypes[i+2]["gas_burden_before_benefits"] = (hhtypes[i+2]["gas_payment_by_hh_per_type_no_ben"]/hhtypes[i+2]["income"]);
      i++;
    } 
    var result11 = ann_combined_payment_per_hh_per_hhtype_after_benefits(myob, hhtypes);  
    return result11; 
}   






// calculates and assigns combined utility payment for each household category after benefits



function ann_combined_payment_per_hh_per_hhtype_after_benefits(ob, hhs) {
    var myob = ob;
    var hhtypes = hhs;
    var benefits = parseFloat(myob["benefits"]);
    var i = 1;
    while (i<=4) {
      hhtypes[i]["ann_combined_payment_per_hh_per_hhtype_w_ben"] = (hhtypes[i]["elec_payment_by_hh_per_type_no_ben"] + hhtypes[i]["gas_payment_by_hh_per_type_no_ben"] - benefits);
      hhtypes[i+1]["ann_combined_payment_per_hh_per_hhtype_w_ben"] = (hhtypes[i+1]["elec_payment_by_hh_per_type_no_ben"] + hhtypes[i+1]["gas_payment_by_hh_per_type_no_ben"] - benefits); 
      hhtypes[i+2]["ann_combined_payment_per_hh_per_hhtype_w_ben"] = (hhtypes[i]["elec_payment_by_hh_per_type_no_ben"] + hhtypes[i+2]["gas_payment_by_hh_per_type_no_ben"] - benefits);
      i++;
    }
    var i = 5;
    while (i<=13) {
      hhtypes[i]["ann_combined_payment_per_hh_per_hhtype_w_ben"] = (hhtypes[i]["elec_payment_by_hh_per_type_no_ben"] + hhtypes[i]["gas_payment_by_hh_per_type_no_ben"]);
      hhtypes[i+1]["ann_combined_payment_per_hh_per_hhtype_w_ben"] = (hhtypes[i+1]["elec_payment_by_hh_per_type_no_ben"] + hhtypes[i+1]["gas_payment_by_hh_per_type_no_ben"]); 
      hhtypes[i+2]["ann_combined_payment_per_hh_per_hhtype_w_ben"] = (hhtypes[i+2]["elec_payment_by_hh_per_type_no_ben"] + hhtypes[i+2]["gas_payment_by_hh_per_type_no_ben"]);
      i++;
    }
    var result12 = combined_cost_burden_after_benefits(myob, hhtypes);
    return result12;
}





// calculates and assigns combined utility cost burden after any benefits, for each household category

function combined_cost_burden_after_benefits(ob, hhs) {
    
    var myob = ob;
    var hhtypes = hhs;
    var i = 1;
    while (i<=13) {
      hhtypes[i]["combined_cost_burden_after_benefits"] = hhtypes[i]["ann_combined_payment_per_hh_per_hhtype_w_ben"]/(hhtypes[i]["income"]);
      hhtypes[i+1]["combined_cost_burden_after_benefits"] = hhtypes[i+1]["ann_combined_payment_per_hh_per_hhtype_w_ben"]/(hhtypes[i+1]["income"]);
      hhtypes[i+2]["combined_cost_burden_after_benefits"] = hhtypes[i+2]["ann_combined_payment_per_hh_per_hhtype_w_ben"]/(hhtypes[i+2]["income"]);
      i++;
    } 
    var gas_list = [];
    var i = 1;
    while (i <= 15) {
      gas_list.push(hhtypes[i]["gas_burden_before_benefits"]*100);
      i += 1;
    }
    var elec_list = [];
    var i = 1;
    while (i <= 15) {
      elec_list.push(hhtypes[i]["elec_burden_before_benefits"]*100);
      i += 1;
    }
    var combined_list = [];
    var i = 1;
    while (i <= 15) {
      combined_list.push(hhtypes[i]["combined_cost_burden_after_benefits"]*100);
      i += 1;
    }
    var revenue = getRevenue(hhtypes);
    var result13 = [gas_list, elec_list, combined_list, revenue, myob, hhtypes];
    return result13;
  }






// allows button to reveal form when pressed

function newinputs() {
  document.getElementById('form1').style.display = 'block';
}



function getRevenue(mydict) {
   var hhtypes = mydict;
   var i = 1;
   var elec_rev = 0;
   var gas_rev = 0;
   while (i <= 15) {
      elec_rev += hhtypes[i]["elec_payment_by_type"];
      gas_rev += hhtypes[i]["gas_payment_by_type"];
      i += 1;
   }
   var revtypes = [elec_rev, gas_rev];
   return revtypes;
}

function comma_thousands(n) {
    return (n).toLocaleString();
}



// outputs text suggestions based on recent results

function calcVerdict(final_revenue, ob, hhs) {
  var revenue = final_revenue;
  var myob = ob;
  var hhtypes = hhs;
  var eval1 = [];
  var eval2 = [];
  document.getElementById("burden").innerHTML = "";
  document.getElementById("revenue").innerHTML = "";
  document.getElementById("conclusion").innerHTML = "";
  if (hhtypes[3]["combined_cost_burden_after_benefits"] > 0.06) {
    document.getElementById("burden").innerHTML = `Category Q1High experiences a cost burden of ${((Math.round(hhtypes[3]["combined_cost_burden_after_benefits"]*1000)/1000)*100)+'%'}, which exceeds the upper threshold for energy cost burden (6% of annual household income after taxes).`;
    eval1.push(1);
  }
  // maybe implement function that calculates value needed when all other values stay constant, for multiple values
  if (revenue < myob["total_expense"]) {
    document.getElementById("revenue").innerHTML += `The lower threshold for annual revenue ($${comma_thousands(Math.round(myob["total_expense"]*100)/100)}) has not been met; the current annual revenue rounded to the nearest dollar is $${comma_thousands(Math.round(revenue))}.` + "" + `You may want to focus on increasing your entered charges, while potentially decreasing your entered rates or increasing your entered benefits.` + ""; 
    if (eval1[0] == 1) {
      document.getElementById("conclusion").innerHTML += "You may want to focus on increasing benefits and charges simultaneously, since the current cost burden exceeds allowed limits and the current revenue does not meet the target minimum." + "" + `The minimum benefits required for the condition where the target minimum revenue is met would be xxx in total.` + "";
    }
  } else if (revenue > myob["maximum_revenue"]) {
    document.getElementById("revenue").innerHTML += `The current annual revenue rounded to the nearest dollar is $${comma_thousands(Math.round(revenue))}, which surpasses the specified upper threshold for annual revenue ($${comma_thousands(myob["maximum_revenue"])}).` + "";
    if (eval1[0] == 1) {
      document.getElementById("conclusion").innerHTML += "You may currently want to focus on lowering charges since both cost burden and revenue exceed allowed limits.";
    }
  } else {
    document.getElementById("revenue").innerHTML += `The current annual revenue rounded to the nearest dollar is $${comma_thousands(Math.round(revenue))} - the minimum and maximum specified bounds for revenue have been satisfied.`;
    if (eval1[0] == 1) {
      document.getElementById("conclusion").innerHTML += "You may want to focus on lowering charges since the present cost burden for lower-income households still exceeds allowed limits.";
    } 
  } 
  if (hhtypes[3]["combined_cost_burden_after_benefits"] <= 0.06 && revenue >= myob["total_expense"] && revenue <= myob["maximum_revenue"]){ 
    document.getElementById("conclusion").innerHTML += "All constraints have been met!";
  }
}

var dict = [];
var newdict = [];

var mykeys = getKys();
var myvals = getValues();
if (myvals[myvals.length-1] == 0) {
  sample = myvals;
  dict = makeDictionary(mykeys, sample);
  newdict = dict;
  alert(JSON.stringify(newdict));

} else {
  dict = makeDictionary(mykeys, sample);
  newdict = makeDictionary(mykeys, myvals);
}
var gas = dict[0];
alert(1);
alert(gas);
var elec = dict[1];
alert(elec);
var comb = newdict[2];
var rev_i = dict[3];
var rev_f = newdict[3];

document.getElementById("myb").addEventListener("click", newinputs);



var gas_round = gas.map(i => Math.round(parseFloat(i)*100)/100);
var elec_round = elec.map(i => Math.round(parseFloat(i)*100)/100);
var comb_round = comb.map(i => Math.round(parseFloat(i)*100)/100); //XXXXXXXX
var rev_i_round = rev_i.map(i => Math.round(parseFloat(i)*100)/100);
var rev_f_round = rev_f.map(i => Math.round(parseFloat(i)*100)/100);


calcVerdict(rev_f_round[0]+rev_f_round[1], newdict[4], newdict[5]);

var clicks = 0;

$(document).ready(function () {
  $("#graph_new").click(function(){
    alert(8);
    var newob = {};
    $.each($("#form1").serializeArray(), function (i, field) {
        if (field.name == "quintile_one") {
          field.name = "quintile_1"
        }
        if (field.name == "quintile_two") {
          field.name = "quintile_2"
        }
        if (field.name == "quintile_three") {
          field.name = "quintile_3"
        }
        if (field.name == "quintile_four") {
          field.name = "quintile_4"
        }
        if (field.name == "quintile_five") {
          field.name = "quintile_5"
        }
        newob[field.name] = parseFloat(field.value);
    });
    clicks += 1;
    var newerdict = hhcategories(newob);
    var gas_burd = newerdict[0];
    var elec_burd = newerdict[1];
    var combin_burd = newerdict[2];
    var rev_fin = newerdict[3];
    var gas_round = gas_burd.map(i => Math.round(parseFloat(i)*100)/100);
    var elec_round = elec_burd.map(i => Math.round(parseFloat(i)*100)/100);
    var combin_round = combin_burd.map(i => Math.round(parseFloat(i)*100)/100);
    var rev_fin_round = rev_fin.map(i => Math.round(parseFloat(i)*100)/100);
    setTimeout(function() {
    newBurdenBar(combin_round)
    }, 500);
    setTimeout(function() {
    expandDataArrays(updatedrevChart, rev_fin_round);
    }, 500);
    var check = displayChart(dict[0], dict[1], newdict[2], dict[3], newdict[3]); 
    var revenuesum = parseFloat(check[0]) + parseFloat(check[1]);
    calcVerdict(revenuesum, newdict[4], newdict[5]);
  });
});


// adds new bar portraying utility cost burden to chart of results obtained from recent entries


function newBurdenBar(combined) {
  var labels = ["Q1Low", "Q1Med", "Q1High", "Q2Low", "Q2Med", "Q2High", "Q3Low", "Q3Med", "Q3High", "Q4Low", "Q4Med", "Q4High", "Q5Low", "Q5Med", "Q5High"];  
  var data = [
    [combined[0], combined[1], combined[2], combined[3], combined[4], combined[5], combined[6], combined[7], combined[8], combined[9], combined[10], combined[11], combined[12], combined[13], combined[14]]
  ];  
  updatedburdenChart.config.data.labels = labels;
  var comb_set = {
    label: "Combined Cost Burden After Adjustments: Test " + `${clicks}`,
    data: data[0],
    backgroundColor: "rgb(110, 0, 215)",
    stack: "Stack" + `${clicks}`,
  };
  updatedburdenChart.config.data.datasets.push(comb_set);
  updatedburdenChart.update();
}



// Expands Revenue Data

function expandDataArrays(chart, data) {
    var label = `${clicks + 1}`;
    chart.data.labels.push(label);
    chart.data.datasets[0].data.push(data[1]);
    chart.data.datasets[1].data.push(data[0]);
    chart.data.datasets[2].data.push(data[1]+data[0]);
    chart.update();
}



// chart for comparing default and most recently entered result

var ctx = document.getElementById("burdenChart");
Chart.defaults.global.defaultFontFamily = "Georgia, script";
var burdenchart = new Chart(ctx, {
  // The type of chart we want to create
  type: 'bar',
  // The data for our dataset
  data: {
    labels: ["Q1Low", "Q1Med", "Q1High", "Q2Low", "Q2Med", "Q2High", "Q3Low", "Q3Med", "Q3High", "Q4Low", "Q4Med", "Q4High", "Q5Low", "Q5Med", "Q5High"],
    datasets: [{
        label: "Default Gas Cost Burden",
        fontSize: 20,
        backgroundColor: "rgb(50, 40, 120)",
        borderColor: "rgb(255, 99, 132)",
        stack: "Stack 0",
        data: [gas_round[0], gas_round[1], gas_round[2], gas_round[3], gas_round[4], gas_round[5], gas_round[6], gas_round[7], gas_round[8], gas_round[9], gas_round[10], gas_round[11], gas_round[12], gas_round[13], gas_round[14]]
      },
      {
        label: "Default Electricity Cost Burden",
        backgroundColor: "rgb(50, 40, 200)",
        borderColor: "rgb(255, 99, 132)",
        stack: "Stack 0",
        data: [elec_round[0], elec_round[1], elec_round[2], elec_round[3], elec_round[4], elec_round[5], elec_round[6], elec_round[7], elec_round[8], elec_round[9], elec_round[10], elec_round[11], elec_round[12], elec_round[13], elec_round[14]]
      },
      {
      label: "Default Combined Cost Burden After Benefits and Any Rate Modifications",
      fontSize: 20,
      backgroundColor: "rgb(50, 0, 255)",
      borderColor: "rgb(255, 99, 132)",
      stack: "Stack 1",
      data: [comb_round[0], comb_round[1], comb_round[2], comb_round[3], comb_round[4], comb_round[5], comb_round[6], comb_round[7], comb_round[8], comb_round[9], comb_round[10], comb_round[11], comb_round[12], comb_round[13], comb_round[14]]
      },
    ]
  },
  options: {
    barValueSpacing: 50,
    responsive: true,
    maintainAspectRatio: false,
    title: {
      display: true,
      text: "Utility Cost Burden (% of Taxed Annual Household Income Paid Towards Utilities) Before vs. After Rate Modifications/Benefits",
      fontSize: 25,
    },
    legend: {
      display: true,
      labels: {
        fontSize: 20
      }
    },
    layout: {
      padding: {
        left: 30,
        right: 30,
        top: 50,
        bottom: 30
      }
    },
    scales: {
      xAxes: [{
        stacked: true,
        scaleLabel: {
          display: true,
          labelString: 'Household Category',
          fontSize: 20,
        },
        ticks: {
          autoSkip: false,
          fontSize: 20,
        }
      }],          
      yAxes: [{
        stacked: true,
        scaleLabel: {
          display: true,
          labelString: 'Utility Cost Burden',
          fontSize: 20,
        },
        ticks: {
          autoSkip: false,
          fontSize: 20,
        }
      }]
    }
  }
});



// chart for comparing default and most recently obtained revenue

var myrev = document.getElementById("revChart");
var revenuechart = new Chart(myrev, {
  // The type of chart we want to create
  type: 'bar',
  // The data for our dataset
  data: {
    labels: ["Default", "Most Recent"], //let user modify default?? existing rates vary?? XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    datasets: [{
        label: "Annual Gas Revenue",
        fontSize: 20,
        backgroundColor: "rgb(50, 40, 120)",
        borderColor: "rgb(255, 99, 132)",
        stack: "Stack 0",
        data: [parseFloat(rev_i_round[1]), parseFloat(rev_f_round[1])]
      },
      {
        label: "Annual Electricity Revenue",
        backgroundColor: "rgb(50, 40, 200)",
        borderColor: "rgb(255, 99, 132)",
        stack: "Stack 0",
        data: [parseFloat(rev_i_round[0]), parseFloat(rev_f_round[0])]
      },
      {
        label: "Total Annual Revenue",
        backgroundColor: "rgb(0, 110, 255)",
        borderColor: "rgb(255, 99, 132)",
        stack: "Stack 1",
        data: [parseFloat(rev_i_round[0]) + parseFloat(rev_i_round[1]), parseFloat(rev_f_round[0]) + parseFloat(rev_f_round[1])]
      },
    ]
  },
  options: {
    barValueSpacing: 700,
    responsive: true,
    maintainAspectRatio: false,
    title: {
      display: true,
      text: "Annual Revenue Before vs. After Modifications/Benefits",
      fontSize: 25,
    },
    legend: {
      display: true,
      labels: {
        fontSize: 20,
      }
    },
    layout: {
      padding: {
        left: 30,
        right: 30,
        top: 50,
        bottom: 30,
      }
    },
    scales: {
      xAxes: [{
        stacked: true,
        scaleLabel: {
          display: true,
          labelString: "Test",
          fontSize: 20,
        },
        ticks: {
          autoSkip: false,
          fontSize: 20,
        }
      }],          
      yAxes: [{
        stacked: true,
        scaleLabel: {
          display: true,
          labelString: 'Revenue',
          fontSize: 20,
        },
        ticks: {
          autoSkip: false,
          fontSize: 20,
          stepSize: 500000000,
          callback: function(value, index, values) {
            value = '$'+value.toLocaleString();
        return value;
          }
        }
      }]
    }
  }
});


// chart for comparing recent results for utility cost burden

var btx = document.getElementById("burdenHistory");
var updatedburdenChart = new Chart(btx, {
  type: 'bar',
  data: {
        labels: ["Q1Low", "Q1Med", "Q1High", "Q2Low", "Q2Med", "Q2High", "Q3Low", "Q3Med", "Q3High", "Q4Low", "Q4Med", "Q4High", "Q5Low", "Q5Med", "Q5High"],
        datasets: [{
            label: "Default Gas Cost Burden",
            fontSize: 20,
            backgroundColor: "rgb(50, 40, 80)",
            borderColor: "rgb(255, 99, 132)",
            stack: "Stack 0",
            data: [gas_round[0], gas_round[1], gas_round[2], gas_round[3], gas_round[4], gas_round[5], gas_round[6], gas_round[7], gas_round[8], gas_round[9], gas_round[10], gas_round[11], gas_round[12], gas_round[13], gas_round[14]]
          },
          {
            label: "Default Electricity Cost Burden",
            backgroundColor: "rgb(50, 40, 160)",
            borderColor: "rgb(255, 99, 132)",
            stack: "Stack 0",
            data: [elec_round[0], elec_round[1], elec_round[2], elec_round[3], elec_round[4], elec_round[5], elec_round[6], elec_round[7], elec_round[8], elec_round[9], elec_round[10], elec_round[11], elec_round[12], elec_round[13], elec_round[14]]},
          {
            label: "Default Combined Cost Burden",
            fontSize: 20,
            backgroundColor: "rgb(50, 0, 215)",
            borderColor: "rgb(255, 99, 132)",
            stack: "Stack 1",
            data: [comb_round[0], comb_round[1], comb_round[2], comb_round[3], comb_round[4], comb_round[5], comb_round[6], comb_round[7], comb_round[8], comb_round[9], comb_round[10], comb_round[11], comb_round[12], comb_round[13], comb_round[14]]
          },
        ]
      },
    options: {
    barValueSpacing: 50,
    responsive: true,
    maintainAspectRatio: false,
    title: {
      display: true,
      text: "Utility Cost Burden (% of Taxed Annual Household Income Paid Towards Utilities) Before vs. After Rate Modifications/Benefits: Test History",
      fontSize: 25,
    },
    legend: {
      display: true,
      labels: {
        fontSize: 20
      }
    },
    layout: {
      padding: {
        left: 30,
        right: 30,
        top: 50,
        bottom: 30
      }
    },
    scales: {
      xAxes: [{
        stacked: true,
        scaleLabel: {
          display: true,
          labelString: 'Household Category',
          fontSize: 20,
        },
        ticks: {
          autoSkip: false,
          fontSize: 20,
        }
      }],          
      yAxes: [{
        stacked: true,
        scaleLabel: {
          display: true,
          labelString: 'Utility Cost Burden',
          fontSize: 20,
        },
        ticks: {
          autoSkip: false,
          fontSize: 20,
        }
      }]
    }
  }
});




// chart for comparing recent results for revenue

var rtx = document.getElementById("revenueHistory");
var updatedrevChart = new Chart(rtx, {
  // The type of chart we want to create
  type: 'bar',
  // The data for our dataset
  data: {
    labels: ["Default", "1"],
    datasets: [{
        label: "Annual Gas Revenue",
        fontSize: 20,
        backgroundColor: "rgb(50, 40, 80)",
        borderColor: "rgb(255, 99, 132)",
        stack: "Stack 0",
        data: [parseFloat(rev_i_round[1]), parseFloat(rev_f_round[1])]
      },
      {
        label: "Annual Electricity Revenue",
        backgroundColor: "rgb(50, 40, 160)",
        borderColor: "rgb(255, 99, 132)",
        stack: "Stack 0",
        data: [parseFloat(rev_i_round[0]), parseFloat(rev_f_round[0])]
      },
      {
        label: "Total Annual Revenue",
        backgroundColor: "rgb(0, 110, 215)",
        borderColor: "rgb(255, 99, 132)",
        stack: "Stack 1",
        data: [parseFloat(rev_i_round[0]) + parseFloat(rev_i_round[1]), parseFloat(rev_f_round[0]) + parseFloat(rev_f_round[1])]
      },
    ]
  },
    options: {
    barValueSpacing: 700,
    responsive: true,
    maintainAspectRatio: false,
    title: {
      display: true,
      text: "Annual Revenue Before vs. After Modifications/Benefits: Test History",
      fontSize: 25,
    },
    legend: {
      display: true,
      labels: {
        fontSize: 20,
      }
    },
    layout: {
      padding: {
        left: 30,
        right: 30,
        top: 50,
        bottom: 30,
      }
    },
    scales: {
      xAxes: [{
        stacked: true,
        scaleLabel: {
          display: true,
          labelString: "Test",
          fontSize: 20,
        },
        ticks: {
          autoSkip: false,
          fontSize: 20,
        }
      }],          
      yAxes: [{
        stacked: true,
        scaleLabel: {
          display: true,
          labelString: 'Revenue',
          fontSize: 20,
        },
        ticks: {
          autoSkip: false,
          fontSize: 20,
          stepSize: 500000000,
          callback: function(value, index, values) {
            value = '$'+value.toLocaleString();
        return value;
          }
        }
      }]
    }
  }
});







// function for adding data to chart

function addData(chart, label, color, data) {
    chart.data.datasets.push({
      label: label,
      backgroundColor: color,
      data: data,
    });
    chart.update();
}
//FIGURE OUT how to maybe suggest separator based on expenditure data and given revenue and rate values
</script> 
</head>
<body>
</body>
</html>
